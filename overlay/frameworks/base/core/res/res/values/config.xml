<?xml version="1.0" encoding="utf-8"?>
<!--
/*
** Copyright 2009, The Android Open Source Project
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/
-->

<!-- These resources are around just to allow their values to be customized
     for different hardware and product builds.  Do not translate. -->
<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         USB interfaces.  If the device doesn't want to support tething over USB this should
         be empty.  An example would be "usb.*" -->
    <string-array translatable="false" name="config_tether_usb_regexs">
        <item>"usb\\d"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
         should be empty.  An example would be "softap.*" -->
    <string-array translatable="false" name="config_tether_wifi_regexs">
        <item>"wlan0"</item>
        <item>"softap.*"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         bluetooth interfaces.  If the device doesn't want to support tethering over bluetooth this
         should be empty. -->
    <string-array translatable="false" name="config_tether_bluetooth_regexs">
        <item>"bt-pan"</item>
    </string-array>

    <!-- Array of ConnectivityManager.TYPE_xxxx values allowable for tethering -->
    <!-- Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH -->
    <integer-array translatable="false" name="config_tether_upstream_types">
        <item>0</item>
        <item>1</item>
        <item>5</item>
        <item>7</item>
    </integer-array>

    <!-- Boolean indicating whether Softap requires reloading AP firmware -->
    <bool name="config_wifiApFirmwareReload">false</bool>

    <!-- Flag indicating whether the we should enable the automatic brightness in Settings.
         Software implementation will be used if config_hardware_auto_brightness_available is not set -->
    <bool name="config_automatic_brightness_available">true</bool>

    <!-- If this is true, the screen will fade off. -->
    <bool name="config_animateScreenLights">false</bool>

    <!-- Indicate whether the SD card is accessible without removing the battery. -->
    <bool name="config_batterySdCardAccessibility">true</bool>

    <!-- Is the notification LED intrusive? Used to decide if there should be a disable option -->
    <bool name="config_intrusiveNotificationLed">true</bool>

    <!-- Is the battery LED intrusive? Used to decide if there should be a disable option -->
    <bool name="config_intrusiveBatteryLed">true</bool>

    <!-- Does the battery LED support multiple colors? Used to decide if the user can change the colors -->
    <bool name="config_multiColorBatteryLed">true</bool>

    <!-- Is the device capable of hot swapping an UICC Card -->
    <bool name="config_hotswapCapable">true</bool>

    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N + 1 control points as follows:
         (1-based arrays)

         Point 1:            (0, value[1]):             lux <= 0
         Point 2:     (level[1], value[2]):  0        < lux <= level[1]
         Point 3:     (level[2], value[3]):  level[2] < lux <= level[3]
         ...
         Point N+1: (level[N], value[N+1]):  level[N] < lux

         The control points must be strictly increasing.  Each control point
         corresponds to an entry in the brightness backlight values arrays.
         For example, if LUX == level[1] (first element of the levels array)
         then the brightness will be determined by value[2] (second element
         of the brightness values array).

         Spline interpolation is used to determine the auto-brightness
         backlight values for LUX levels between these control points.

         Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>3</item>
        <item>6</item>
        <item>12</item>
        <item>25</item>
        <item>50</item>
        <item>100</item>
        <item>200</item>
        <item>400</item>
        <item>600</item>
        <item>800</item>
        <item>1000</item>
        <item>1200</item>
        <item>1400</item>
        <item>1600</item>
        <item>1800</item>
        <item>2000</item>
    </integer-array>

    <!-- Array of output values for LCD backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         The brightness values must be between 0 and 255 and be non-decreasing.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLcdBacklightValues">
        <item>20</item>  <!--     0 -    3 -->
        <item>30</item>  <!--     3 -    6 -->
        <item>40</item>  <!--     6 -   12 -->
        <item>50</item>  <!--    12 -   25 -->
        <item>60</item>  <!--    25 -   50 -->
        <item>80</item>  <!--    50 -  100 -->
        <item>100</item>  <!--  100 -  200 -->
        <item>120</item>  <!--  200 -  400 -->
        <item>140</item>  <!--  400 -  600 -->
        <item>160</item>  <!--  600 -  800 -->
        <item>180</item>  <!--  800 - 1000 -->
        <item>200</item>  <!-- 1000 - 1200 -->
        <item>210</item>  <!-- 1200 - 1400 -->
        <item>220</item>  <!-- 1400 - 1600 -->
        <item>230</item>  <!-- 1600 - 1800 -->
        <item>240</item>  <!-- 1800 - 2000 -->
        <item>255</item>  <!-- 2000+ -->
    </integer-array>

    <!-- Array of output values for button backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         The brightness values must be between 0 and 255 and be non-decreasing.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessButtonBacklightValues">
        <item>20</item>  <!--     0 -    3 -->
        <item>30</item>  <!--     3 -    6 -->
        <item>40</item>  <!--     6 -   12 -->
        <item>50</item>  <!--    12 -   25 -->
        <item>60</item>  <!--    25 -   50 -->
        <item>80</item>  <!--    50 -  100 -->
        <item>100</item>  <!--  100 -  200 -->
        <item>120</item>  <!--  200 -  400 -->
        <item>140</item>  <!--  400 -  600 -->
        <item>160</item>  <!--  600 -  800 -->
        <item>180</item>  <!--  800 - 1000 -->
        <item>200</item>  <!-- 1000 - 1200 -->
        <item>210</item>  <!-- 1200 - 1400 -->
        <item>220</item>  <!-- 1400 - 1600 -->
        <item>230</item>  <!-- 1600 - 1800 -->
        <item>240</item>  <!-- 1800 - 2000 -->
        <item>255</item>  <!-- 2000+ -->
    </integer-array>

    <!-- Array of output values for keyboard backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         The brightness values must be between 0 and 255 and be non-decreasing.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessKeyboardBacklightValues">
        <item>20</item>  <!--     0 -    3 -->
        <item>30</item>  <!--     3 -    6 -->
        <item>40</item>  <!--     6 -   12 -->
        <item>50</item>  <!--    12 -   25 -->
        <item>60</item>  <!--    25 -   50 -->
        <item>80</item>  <!--    50 -  100 -->
        <item>100</item>  <!--  100 -  200 -->
        <item>120</item>  <!--  200 -  400 -->
        <item>140</item>  <!--  400 -  600 -->
        <item>160</item>  <!--  600 -  800 -->
        <item>180</item>  <!--  800 - 1000 -->
        <item>200</item>  <!-- 1000 - 1200 -->
        <item>210</item>  <!-- 1200 - 1400 -->
        <item>220</item>  <!-- 1400 - 1600 -->
        <item>230</item>  <!-- 1600 - 1800 -->
        <item>240</item>  <!-- 1800 - 2000 -->
        <item>255</item>  <!-- 2000+ -->
    </integer-array>

    <bool name="config_deviceHasVariableButtonBrightness">true</bool>

    <!-- Device supports LED flashlight -->
    <bool name="config_enableTorch">true</bool>
</resources>
